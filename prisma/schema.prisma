generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("channel_id") @db.Uuid

  name     String  @unique @map("name")
  password String? @map("password") @db.Char(60)

  streams Stream[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("channels")
}

model Stream {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @map("stream_id") @db.Uuid
  twitchId String @unique @map("twitch_id")

  title     String  @map("title")
  channel   Channel @relation(fields: [channelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  channelId String  @map("channel_id") @db.Uuid

  participations Participation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("streams")
}

model Viewer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("viewer_id") @db.Uuid

  username String @unique @map("username")

  participations Participation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("viewers")
}

model Participation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("participation_id") @db.Uuid

  viewer   Viewer @relation(fields: [viewerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  viewerId String @map("viewer_id") @db.Uuid

  stream   Stream @relation(fields: [streamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  streamId String @map("stream_id") @db.Uuid

  messagesCount Int         @default(0) @map("messages_count")
  assessment    Assessment? @map("assessment")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([viewerId, streamId])
  @@map("participations")
}

enum Assessment {
  EXCELLENT
  GOOD
  NEUTRAL
  BAD
  AWFUL
}
